#include <tmdesc/functional/invoke.hpp>
#include <tmdesc/meta/helpers.hpp>
#include <tmdesc/tuple/tuple.hpp>
#include <utility>

namespace bench {

//template <class Seq> struct unpack_impl_t;
//template <std::size_t... I> struct unpack_impl_t<std::index_sequence<I...>> {
//    template <class Tuple, class Fn>
//    constexpr decltype(auto) operator()(Tuple&& tuple, Fn&& fn) const
//        noexcept(noexcept(::tmdesc::invoke(std::declval<Fn>(), ::tmdesc::get<I>(std::declval<Tuple>())...))) {
//        return ::tmdesc::invoke(std::forward<Fn>(fn), ::tmdesc::get<I>(std::forward<Tuple>(tuple))...);
//    }
//};

struct unpack_t {
private:
    //template <class Tuple> using impl_for_tuple = unpack_impl_t<::tmdesc::index_sequence_for_tuple<Tuple>>;

    template <class Tuple, class Fn, std::size_t... I>
    constexpr decltype(auto) impl(Tuple&& tuple, Fn&& fn, std::index_sequence<I...>) const
        noexcept(noexcept(::tmdesc::invoke(std::declval<Fn>(), ::tmdesc::get<I>(std::declval<Tuple>())...))) {
        return ::tmdesc::invoke(std::forward<Fn>(fn), ::tmdesc::get<I>(std::forward<Tuple>(tuple))...);
    }
public:
    template <class Tuple, class Fn>
    constexpr decltype(auto) operator()(Tuple&& tuple, Fn&& fn) const
    noexcept(noexcept(impl(std::declval<Tuple>(), std::declval<Fn>(), ::tmdesc::index_sequence_for_tuple<Tuple>{}))){
        return  impl(std::forward<Tuple>(tuple), std::forward<Fn>(fn), ::tmdesc::index_sequence_for_tuple<Tuple>{});
    }
};
constexpr unpack_t unpack{};

struct tuple_foreach_t {
private:
    template <class Fn> struct on_each {
        Fn fn;

        template <class... Args>
        constexpr void operator()(Args&&... args) const
            noexcept(::tmdesc::meta::fast_and({::tmdesc::is_nothrow_invokable_v<Fn, Args&&>...})) {
            (void)std::initializer_list<bool>{true, ((void)fn(std::forward<Args>(args)), void(), true)...};
        }
    };

public:
    template <class Tuple, class Fn>
    constexpr void operator()(Tuple&& t, Fn&& fn) const
        noexcept(::tmdesc::is_nothrow_invokable_v<unpack_t, Tuple, on_each<Fn&&>>) {
        unpack(std::forward<Tuple>(t), on_each<Fn&&>{std::forward<Fn>(fn)});
    }
};
constexpr tuple_foreach_t tuple_foreach;

struct add {
    int& acc;
    template <class T> constexpr void operator()(const T& v) const noexcept { acc += v.value + v.index; }
};
struct sub {
    int& acc;
    template <class T> constexpr void operator()(const T& v) const noexcept { acc -= v.value + v.index; }
};

template <class Tuple> constexpr int calc_sum(const Tuple& t) noexcept {
    int i = 0;
    tuple_foreach(t, add{i});
    return i;
}
template <class Tuple> constexpr int calc_sub2(const Tuple& t) noexcept {
    int i = 0;
    tuple_foreach(t, sub{i});
    return i;
}
} // namespace bench
template <std::size_t I> struct Value {
    static constexpr int index = I;
    int value;
};
int main() {
    constexpr auto t =
        tmdesc::make_tuple(<%= (1.. @item).map{ | i | "Value<" + i.to_s + ">{" + (i * 7).to_s + "}"}.join(', ') %>);
#ifdef METABENCH
    static_assert(noexcept(bench::calc_sum(t)), "");
    static_assert(noexcept(bench::calc_sub2(t)), "");
    constexpr int sum = bench::calc_sum(t);
    constexpr int sub = bench::calc_sub2(t);
    static_assert(sum == <%= (1.. @item).inject(0){ | acc, i | acc + i * 8} %>, "bench impl error");
    static_assert(sub == <%= (1.. @item).inject(0){ | acc, i | acc - i * 8} %>, "bench impl error");
#endif
    return sizeof(t);
}
