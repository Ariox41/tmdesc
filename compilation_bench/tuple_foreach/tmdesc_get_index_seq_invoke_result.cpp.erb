#include <tmdesc/functional/invoke.hpp>
#include <tmdesc/meta/logical_operations.hpp>
#include <tmdesc/tuple/tuple.hpp>
#include <utility>

namespace bench {
using ::tmdesc::get;

template <class Seq> struct tuple_foreach_impl_t;
template <std::size_t... I> struct tuple_foreach_impl_t<std::index_sequence<I...>> {
    template <class Tuple, class Fn>
    constexpr void operator()(Tuple&& t, Fn&& fn) const noexcept(
        ::tmdesc::meta::fast_and_v<::tmdesc::is_nothrow_invocable_v<Fn, ::tmdesc::tuple_get_result_t<I, Tuple>>...>) {
        (void)std::initializer_list<bool>{
            true, ((void)::tmdesc::invoke(std::forward<Fn>(fn), get<I>(std::forward<Tuple>(t))), void(), true)...};
    }
};

struct tuple_foreach_t {
private:
    template <class Tuple> using impl_for_tuple = tuple_foreach_impl_t<::tmdesc::index_sequence_for_tuple<Tuple>>;

public:
    template <class Tuple, class Fn>
    constexpr void operator()(Tuple&& t, Fn&& fn) const
        noexcept(::tmdesc::is_nothrow_invocable_v<impl_for_tuple<Tuple>, Tuple, Fn>) {
        impl_for_tuple<Tuple>{}(std::forward<Tuple>(t), std::forward<Fn>(fn));
    }
};

constexpr tuple_foreach_t tuple_foreach;

struct add {
    int& acc;
    template <class T> constexpr void operator()(const T& v) const noexcept { acc += v.value + v.index; }
};
struct sub {
    int& acc;
    template <class T> constexpr void operator()(const T& v) const noexcept { acc -= v.value + v.index; }
};

template <class Tuple> constexpr int calc_sum(const Tuple& t) noexcept {
    int i = 0;
    tuple_foreach(t, add{i});
    return i;
}
template <class Tuple> constexpr int calc_sub2(const Tuple& t) noexcept {
    int i = 0;
    tuple_foreach(t, sub{i});
    return i;
}
} // namespace bench
template <std::size_t I> struct Value {
    static constexpr int index = I;
    int value;
};
int main() {
    constexpr auto t =
        tmdesc::make_tuple(<%= (1.. @item).map{ | i | "Value<" + i.to_s + ">{" + (i * 7).to_s + "}"}.join(', ') %>);
#ifdef METABENCH
    static_assert(noexcept(bench::calc_sum(t)), "");
    static_assert(noexcept(bench::calc_sub2(t)), "");
    constexpr int sum = bench::calc_sum(t);
    constexpr int sub = bench::calc_sub2(t);
    static_assert(sum == <%= (1.. @item).inject(0){ | acc, i | acc + i * 8} %>, "bench impl error");
    static_assert(sub == <%= (1.. @item).inject(0){ | acc, i | acc - i * 8} %>, "bench impl error");
#endif
    return sizeof(t);
}
